import { useEffect, useState } from 'react'
import { useForm } from "react-hook-form";
// import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import useSWR from 'swr'
import Avatar from '@mui/material/Avatar';

import Container from '@mui/material/Container';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import Divider from '@mui/material/Divider';
import ListItemText from '@mui/material/ListItemText';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';

import fetcher from '../utils/fetcher'
import useRefreshToken from '../hooks/useRefreshToken'
import useCreateNewChat from '../hooks/useCreateNewChat'
import usePostMessageInChat from '../hooks/usePostMessageInChat'
import useGetAllChatIdMessages from '../hooks/useGetAllChatIdMessages'

// var decodedData = atob(encodedData);


const Home = () => {
  const { register, handleSubmit, reset } = useForm();

  const [open, setOpen] = useState(false);
  const [activeWindow, setActiveWindow] = useState();

  const [user, setUser] = useState(null)
  const [currentChatId, setCurrentChatId] = useState(null)
  const [token, setToken] = useState(null)

  const { refreshToken, newToken } = useRefreshToken(token)
  const { newChat, chatId } = useCreateNewChat(token)
  const { postingMessage, messageStatus, sentMessage } = usePostMessageInChat(token)
  const { gettingAllMessage, messages } = useGetAllChatIdMessages(token)



  const handleClickOpen = (i) => {
    setOpen(true);
    setActiveWindow(i)
    refreshToken()
    newChat([user.id, i.id])
    setCurrentChatId(chatId)

  };

  const getAllChat = async () => {
    let id = localStorage.getItem('currentChatId')
    await gettingAllMessage(id)
  };

  const handleSending = async ({ text }) => {
    //send message
    let id = localStorage.getItem('currentChatId')
    await postingMessage(id, text)
    reset({
      text: "",
    });
    getAllChat()
  };

  const handleClose = () => {
    setOpen(false);
  };

  useEffect(() => {
    fetch('http://localhost:2428/auth/login', {
      method: 'POST',
      headers: new Headers({ 'Content-Type': 'application/json' }),
      body: JSON.stringify({
        userName: "String",
        password: "String"
      }),
      credentials: 'same-origin'
    })
      .then((res) => res.json())
      .then((data) => {
        setToken(data.accessToken)
        setUser(data.user)
        localStorage.setItem('accessToken', data.accessToken ? data.accessToken : 'undefined');
      })
  }, [])


  const { data } = useSWR(token ? ['http://localhost:2428/users', token] : null, fetcher)

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container className={styles.main}>
        <p className={styles.title}>
          Welcome {user?.firstName}
        </p>
        <p>{token}</p>

        available chats:
        <Grid container >
          <Grid item md={3}>
            <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>
              {data && data?.map(i => {
                return (
                  <span key={i.id}>
                    <Button variant="text" onClick={() => handleClickOpen(i)}>
                      <ListItem alignItems="flex-start">
                        <ListItemAvatar>
                          <Avatar alt={i.firstName} src={i.avatar} />
                        </ListItemAvatar>
                        <ListItemText
                          primary={`${i.firstName} ${i.lastName}`}
                          secondary={
                            <>
                              {i.phoneNumber}
                            </>
                          }
                        />
                      </ListItem>
                    </Button>
                    <Divider variant="inset" component="li" />
                  </span>
                )
              })}
            </List>
          </Grid>


          {/* chatbox */}
          <Grid item md={9}>
            {open && (
              <Dialog open={open} onClose={handleClose} as="form" onSubmit={handleSubmit(handleSending)}>
                <DialogTitle>{`${activeWindow?.firstName} ${activeWindow?.lastName}`}</DialogTitle>
                <DialogContent>
                  <DialogContentText>
                    {messages?.map(msg => {
                      return (
                        <p key={msg.id}>{msg.message}</p>
                      )
                    })}
                  </DialogContentText>
                  <TextField
                    {...register("text")}
                    autoFocus
                    margin="dense"
                    id="text"
                    type="text"
                    fullWidth
                    variant="outlined"
                    multiline
                  />
                </DialogContent>
                <DialogActions>
                  <Button type="submit">Send</Button>
                </DialogActions>
              </Dialog>
            )}
          </Grid>
        </Grid>
      </Container>
    </div>
  )
}

export default Home;
